/*
Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
 

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == nullptr)
        {
            return nullptr;
        }

        ListNode * newHead = nullptr;

        while(head != nullptr)
        {
            ListNode * next = head->next;
            head->next = newHead;
            newHead = head;
            head = next;
        }

        return newHead;
    }
};

/*
Merge LinkList

You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == nullptr)
        {
            return list2;
        }

        if(list2 == nullptr)
        {
            return list1;
        }

        ListNode* head = nullptr;
        ListNode* tail = nullptr;

        while(list1 != nullptr && list2 != nullptr)
        {
            ListNode *next = nullptr;

            if(list1->val <= list2->val)
            {
                if(!head)
                {
                    next = list1->next;
                    list1->next = head;
                    tail = head = list1;
                    list1 = next;
                }
                else
                {
                    next = list1->next;
                    list1->next = nullptr;
                    tail->next = list1;
                    tail = tail->next;
                    list1 = next;
                }
            }
            else
            {
                if(!head)
                {
                    next = list2->next;
                    list2->next = head;
                    tail = head = list2;
                    list2 = next;
                }
                else
                {
                    next = list2->next;
                    list2->next = nullptr;
                    tail->next = list2;
                    tail = tail->next;
                    list2 = next;
                }
            }
        }

        if(list1 != nullptr)
        {
            tail->next = list1;
        }

        if(list2 != nullptr)
        {
            tail->next = list2;
        }
        
        return head;
    }
};

/*
PalinDrome LinkList

Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 

Follow up: Could you do it in O(n) time and O(1) space?
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == nullptr)
        {
            return false;
        }

        if(head->next == nullptr)
        {
            return true;
        }

        ListNode * fast = head->next;
        ListNode * slow = head;

        while(fast && fast->next != nullptr)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* middle = slow->next;
        slow->next = nullptr;
        ListNode *newHead = nullptr;
        
        while(middle != nullptr)
        {
            ListNode *next = middle->next;
            middle->next = newHead;
            newHead = middle;
            middle = next;
        }

        

        while(head != nullptr && newHead != nullptr)
        {
            if(head->val != newHead->val)
            {
                return false;
            }
            head = head->next;
            newHead = newHead->next;
        }

        if(!head && !newHead)
        {
            return true;
        }

        if(newHead)
        {
            return false;
        }

        if(head->next == nullptr)
        {
            return true;
        }

        return true;
        
    }
};
